{
  "language": "Solidity",
  "sources": {
    "contracts/CryptoCharacter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title CryptoCharacter\n/// @author Ng Ju Peng\n/// @notice Track ownership of each part of the character\ncontract CryptoCharacter {\n    struct CharacterPartOwnership {\n        string styleURI;\n        address owner;\n        uint256 highestBid;\n    }\n\n    struct Character {\n        CharacterPartOwnership hair;\n        CharacterPartOwnership eye;\n        CharacterPartOwnership mouth;\n        CharacterPartOwnership cloth;\n    }\n\n    // in order to gain the ownership of the part of the character, at least > MIN_BID_AMOUNT + character part.highest bid\n    uint256 private constant MIN_BID_AMOUNT = 0.001 ether;\n\n    address private immutable i_owner;\n\n    // the only character in this contract\n    Character private s_character;\n\n    // track the style ipfs uri\n    string[] internal s_hairStyleURIs;\n    string[] internal s_eyeStyleURIs;\n    string[] internal s_mouthStyleURIs;\n    string[] internal s_clothStyleURIs;\n\n    /********************\n        Events\n    ********************/\n    event UpdateCharacterStyle(\n        string indexed part,\n        address indexed bidder,\n        string uri,\n        uint256 amount\n    );\n    event NewStyleAdded(string uri);\n\n    /********************\n        Errors\n    ********************/\n    error CryptoCharacter__InsufficientBidAmount();\n    error CryptoCharacter__NotOwner();\n    error CryptoCharacter__StyleExisted();\n    error CryptoCharacter__AccessOutOfBound();\n\n    /********************\n        Modifiers\n    ********************/\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) {\n            revert CryptoCharacter__NotOwner();\n        }\n        _;\n    }\n    modifier isEnoughBidAmount(CharacterPartOwnership memory _part) {\n        if (msg.value <= _part.highestBid + MIN_BID_AMOUNT) {\n            revert CryptoCharacter__InsufficientBidAmount();\n        }\n        _;\n    }\n    modifier isValidIndex(uint256 _index, string[] memory _arr) {\n        if (_index < 0 || _index >= _arr.length) {\n            revert CryptoCharacter__AccessOutOfBound();\n        }\n        _;\n    }\n\n    constructor(\n        string[] memory _hairStyleURIs,\n        string[] memory _eyeStyleURIs,\n        string[] memory _mouthStyleURIs,\n        string[] memory _clothStyleURIs\n    ) {\n        i_owner = msg.sender;\n        // initialize the character\n        s_character = Character({\n            hair: CharacterPartOwnership({\n                styleURI: _hairStyleURIs[0],\n                owner: msg.sender,\n                highestBid: 0.001 ether\n            }),\n            eye: CharacterPartOwnership({\n                styleURI: _eyeStyleURIs[0],\n                owner: msg.sender,\n                highestBid: 0.001 ether\n            }),\n            mouth: CharacterPartOwnership({\n                styleURI: _mouthStyleURIs[0],\n                owner: msg.sender,\n                highestBid: 0.001 ether\n            }),\n            cloth: CharacterPartOwnership({\n                styleURI: _clothStyleURIs[0],\n                owner: msg.sender,\n                highestBid: 0.001 ether\n            })\n        });\n        s_hairStyleURIs = _hairStyleURIs;\n        s_eyeStyleURIs = _eyeStyleURIs;\n        s_mouthStyleURIs = _mouthStyleURIs;\n        s_clothStyleURIs = _clothStyleURIs;\n    }\n\n    fallback() external payable {}\n\n    receive() external payable {}\n\n    /********************\n        Gain part ownership of the character\n    ********************/\n\n    /// @notice gain the ownership of character's hair and use the index in s_hairStyleURIs as hair outfit\n    function selectNewHairStyle(uint256 _index)\n        external\n        payable\n        isEnoughBidAmount(s_character.hair)\n        isValidIndex(_index, s_hairStyleURIs)\n    {\n        s_character.hair = CharacterPartOwnership({\n            styleURI: s_hairStyleURIs[_index],\n            owner: msg.sender,\n            highestBid: msg.value\n        });\n        emit UpdateCharacterStyle(\n            \"hair\",\n            msg.sender,\n            s_hairStyleURIs[_index],\n            msg.value\n        );\n    }\n\n    /// @notice gain the ownership of character's eye and use the index in s_eyeStyleURIs as eye outfit\n    function selectNewEyeStyle(uint256 _index)\n        external\n        payable\n        isEnoughBidAmount(s_character.eye)\n        isValidIndex(_index, s_eyeStyleURIs)\n    {\n        s_character.eye = CharacterPartOwnership({\n            styleURI: s_eyeStyleURIs[_index],\n            owner: msg.sender,\n            highestBid: msg.value\n        });\n        emit UpdateCharacterStyle(\n            \"eye\",\n            msg.sender,\n            s_eyeStyleURIs[_index],\n            msg.value\n        );\n    }\n\n    /// @notice gain the ownership of character's mouth and use the index in s_mouthStyleURIs as mouth outfit\n    function selectNewMouthStyle(uint256 _index)\n        external\n        payable\n        isEnoughBidAmount(s_character.mouth)\n        isValidIndex(_index, s_mouthStyleURIs)\n    {\n        s_character.mouth = CharacterPartOwnership({\n            styleURI: s_mouthStyleURIs[_index],\n            owner: msg.sender,\n            highestBid: msg.value\n        });\n        emit UpdateCharacterStyle(\n            \"mouth\",\n            msg.sender,\n            s_mouthStyleURIs[_index],\n            msg.value\n        );\n    }\n\n    /// @notice gain the ownership of character's cloth and use the index in s_clothStyleURIs as cloth outfit\n    function selectNewClothStyle(uint256 _index)\n        external\n        payable\n        isEnoughBidAmount(s_character.cloth)\n        isValidIndex(_index, s_clothStyleURIs)\n    {\n        s_character.cloth = CharacterPartOwnership({\n            styleURI: s_clothStyleURIs[_index],\n            owner: msg.sender,\n            highestBid: msg.value\n        });\n        emit UpdateCharacterStyle(\n            \"cloth\",\n            msg.sender,\n            s_clothStyleURIs[_index],\n            msg.value\n        );\n    }\n\n    /********************\n        Add new outfit for each part of the character\n    ********************/\n    function addNewHairStyle(string memory _newHairStyleURI)\n        external\n        onlyOwner\n    {\n        if (_isStyleURIExist(_newHairStyleURI, s_hairStyleURIs)) {\n            revert CryptoCharacter__StyleExisted();\n        }\n        s_hairStyleURIs.push(_newHairStyleURI);\n        emit NewStyleAdded(_newHairStyleURI);\n    }\n\n    function addNewEyeStyle(string memory _newEyeStyleURI) external onlyOwner {\n        if (_isStyleURIExist(_newEyeStyleURI, s_eyeStyleURIs)) {\n            revert CryptoCharacter__StyleExisted();\n        }\n        s_eyeStyleURIs.push(_newEyeStyleURI);\n        emit NewStyleAdded(_newEyeStyleURI);\n    }\n\n    function addNewMouthStyle(string memory _newMouthStyleURI)\n        external\n        onlyOwner\n    {\n        if (_isStyleURIExist(_newMouthStyleURI, s_mouthStyleURIs)) {\n            revert CryptoCharacter__StyleExisted();\n        }\n        s_mouthStyleURIs.push(_newMouthStyleURI);\n        emit NewStyleAdded(_newMouthStyleURI);\n    }\n\n    function addNewClothStyle(string memory _newClothStyleURI)\n        external\n        onlyOwner\n    {\n        if (_isStyleURIExist(_newClothStyleURI, s_clothStyleURIs)) {\n            revert CryptoCharacter__StyleExisted();\n        }\n        s_clothStyleURIs.push(_newClothStyleURI);\n        emit NewStyleAdded(_newClothStyleURI);\n    }\n\n    /********************\n        Private functions\n    ********************/\n    function _isStyleURIExist(string memory uri, string[] memory uris)\n        private\n        pure\n        returns (bool)\n    {\n        for (uint256 i = 0; i < uris.length; i++) {\n            if (\n                keccak256(abi.encodePacked(uri)) ==\n                keccak256(abi.encodePacked(uris[i]))\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /********************\n        Read Only\n    ********************/\n    function getOwner() external view returns (address) {\n        return i_owner;\n    }\n\n    function getCharacter() external view returns (Character memory) {\n        return s_character;\n    }\n\n    function getMinimumBidAmount() external pure returns (uint256) {\n        return MIN_BID_AMOUNT;\n    }\n\n    function getHairStyleURIs() external view returns (string[] memory) {\n        return s_hairStyleURIs;\n    }\n\n    function getEyeStyleURIs() external view returns (string[] memory) {\n        return s_eyeStyleURIs;\n    }\n\n    function getMouthStyleURIs() external view returns (string[] memory) {\n        return s_mouthStyleURIs;\n    }\n\n    function getClothStyleURIs() external view returns (string[] memory) {\n        return s_clothStyleURIs;\n    }\n\n    function getHairStyleURI(uint256 _index)\n        external\n        view\n        returns (string memory)\n    {\n        return s_hairStyleURIs[_index];\n    }\n\n    function getEyeStyleURI(uint256 _index)\n        external\n        view\n        returns (string memory)\n    {\n        return s_eyeStyleURIs[_index];\n    }\n\n    function getMouthStyleURI(uint256 _index)\n        external\n        view\n        returns (string memory)\n    {\n        return s_mouthStyleURIs[_index];\n    }\n\n    function getClothStyleURI(uint256 _index)\n        external\n        view\n        returns (string memory)\n    {\n        return s_clothStyleURIs[_index];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}